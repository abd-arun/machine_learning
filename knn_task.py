# -*- coding: utf-8 -*-
"""KNN_Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ueF4GuNrpe2JbGG_Aw25IYjq3xY-eg0u
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from collections import Counter
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Step 1: Load and Preprocess Data
iris = load_iris()
data = iris.data
labels = iris.target

# Normalize dataset
scaler = MinMaxScaler()
data = scaler.fit_transform(data)

# Split dataset into training (80%) and testing (20%)
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# Step 2: Implement KNN Algorithm from Scratch
def euclidean_distance(x1, x2):
    return np.sqrt(np.sum((x1 - x2) ** 2))

class KNN_Custom:
    def __init__(self, k=3):
        self.k = k

    def fit(self, X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train

    def predict(self, X_test):
        predictions = [self._predict(x) for x in X_test]
        return np.array(predictions)

    def _predict(self, x):
        # Compute distances
        distances = [euclidean_distance(x, x_train) for x_train in self.X_train]
        # Get indices of the k nearest neighbors
        k_indices = np.argsort(distances)[:self.k]
        # Get labels of k nearest neighbors
        k_nearest_labels = [self.y_train[i] for i in k_indices]
        # Majority vote
        most_common = Counter(k_nearest_labels).most_common(1)
        return most_common[0][0]

# Step 3: Train and Evaluate Custom KNN
knn_custom = KNN_Custom(k=3)
knn_custom.fit(X_train, y_train)
y_pred_custom = knn_custom.predict(X_test)
custom_accuracy = accuracy_score(y_test, y_pred_custom)
print(f"Custom KNN Accuracy: {custom_accuracy:.2f}")

# Step 4: Compare with Scikit-Learn KNN
knn_sklearn = KNeighborsClassifier(n_neighbors=3)
knn_sklearn.fit(X_train, y_train)
y_pred_sklearn = knn_sklearn.predict(X_test)
sklearn_accuracy = accuracy_score(y_test, y_pred_sklearn)
print(f"Scikit-Learn KNN Accuracy: {sklearn_accuracy:.2f}")

# Step 5: Save Comparison Report
report = f"Custom KNN Accuracy: {custom_accuracy:.2f}\nScikit-Learn KNN Accuracy: {sklearn_accuracy:.2f}"
with open("accuracy_comparison_report.txt", "w") as f:
    f.write(report)

# Step 6: Visualizing Decision Boundaries (Optional)
from mlxtend.plotting import plot_decision_regions

# Use only first two features for visualization
X_vis = X_train[:, :2]
y_vis = y_train

# Train a new KNN model with 2 features
knn_vis = KNeighborsClassifier(n_neighbors=3)
knn_vis.fit(X_vis, y_vis)

# Plot decision boundary
plt.figure(figsize=(8, 6))
plot_decision_regions(X_vis, y_vis, clf=knn_vis, legend=2)
plt.title("KNN Decision Boundary")
plt.show()

import joblib

# Save the trained model
joblib.dump(knn_sklearn, "knn_model.pkl")
